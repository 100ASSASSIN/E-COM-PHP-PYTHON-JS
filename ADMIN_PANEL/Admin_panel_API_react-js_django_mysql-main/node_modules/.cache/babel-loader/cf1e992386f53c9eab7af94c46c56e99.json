{"ast":null,"code":"mapboxgl.accessToken = 'pk.eyJ1IjoiYWprb3JuZXQiLCJhIjoiY2t1c2YwOWZzMjFibDJwcDFoMmd2aTZjdCJ9.BKJONMq5kMd-QVQ77ya_RQ';\nconst map = new mapboxgl.Map({\n  container: 'map',\n  // Choose from Mapbox's core styles, or make your own style with Mapbox Studio\n  style: 'mapbox://styles/mapbox/dark-v11',\n  center: [-103.5917, 40.6699],\n  zoom: 3\n});\nmap.on('load', () => {\n  // Add a new source from our GeoJSON data and\n  // set the 'cluster' option to true. GL-JS will\n  // add the point_count property to your source data.\n  map.addSource('earthquakes', {\n    type: 'geojson',\n    // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n    // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n    data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n    cluster: true,\n    clusterMaxZoom: 14,\n    // Max zoom to cluster points on\n    clusterRadius: 100 // Radius of each cluster when clustering points (defaults to 50)\n\n  });\n  map.addLayer({\n    id: 'clusters',\n    type: 'circle',\n    source: 'earthquakes',\n    filter: ['has', 'point_count'],\n    paint: {\n      // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)\n      // with three steps to implement three types of circles:\n      //   * Blue, 20px circles when point count is less than 100\n      //   * Yellow, 30px circles when point count is between 100 and 750\n      //   * Pink, 40px circles when point count is greater than or equal to 750\n      'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n      'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n    }\n  });\n  map.addLayer({\n    id: 'cluster-count',\n    type: 'symbol',\n    source: 'earthquakes',\n    filter: ['has', 'point_count'],\n    layout: {\n      'text-field': ['get', 'point_count_abbreviated'],\n      'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n      'text-size': 12\n    }\n  });\n  map.addLayer({\n    id: 'unclustered-point',\n    type: 'circle',\n    source: 'earthquakes',\n    filter: ['!', ['has', 'point_count']],\n    paint: {\n      'circle-color': '#11b4da',\n      'circle-radius': 4,\n      'circle-stroke-width': 1,\n      'circle-stroke-color': '#fff'\n    }\n  }); // inspect a cluster on click\n\n  map.on('click', 'clusters', e => {\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: ['clusters']\n    });\n    const clusterId = features[0].properties.cluster_id;\n    map.getSource('earthquakes').getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n      map.easeTo({\n        center: features[0].geometry.coordinates,\n        zoom: zoom\n      });\n    });\n  }); // When a click event occurs on a feature in\n  // the unclustered-point layer, open a popup at\n  // the location of the feature, with\n  // description HTML from its properties.\n\n  map.on('click', 'unclustered-point', e => {\n    const coordinates = e.features[0].geometry.coordinates.slice();\n    const mag = e.features[0].properties.mag;\n    const tsunami = e.features[0].properties.tsunami === 1 ? 'yes' : 'no'; // Ensure that if the map is zoomed out such that\n    // multiple copies of the feature are visible, the\n    // popup appears over the copy being pointed to.\n\n    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n    }\n\n    new mapboxgl.Popup().setLngLat(coordinates).setHTML(`magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`).addTo(map);\n  });\n  map.on('mouseenter', 'clusters', () => {\n    map.getCanvas().style.cursor = 'pointer';\n  });\n  map.on('mouseleave', 'clusters', () => {\n    map.getCanvas().style.cursor = '';\n  });\n});","map":{"version":3,"names":["mapboxgl","accessToken","map","Map","container","style","center","zoom","on","addSource","type","data","cluster","clusterMaxZoom","clusterRadius","addLayer","id","source","filter","paint","layout","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","easeTo","geometry","coordinates","slice","mag","tsunami","Math","abs","lngLat","lng","Popup","setLngLat","setHTML","addTo","getCanvas","cursor"],"sources":["/home/assassin/GIT/Admin_panel_API/src/map/script.js"],"sourcesContent":["mapboxgl.accessToken = 'pk.eyJ1IjoiYWprb3JuZXQiLCJhIjoiY2t1c2YwOWZzMjFibDJwcDFoMmd2aTZjdCJ9.BKJONMq5kMd-QVQ77ya_RQ';\n    const map = new mapboxgl.Map({\n        container: 'map',\n        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio\n        style: 'mapbox://styles/mapbox/dark-v11',\n        center: [-103.5917, 40.6699],\n        zoom: 3\n    });\n\n    map.on('load', () => {\n        // Add a new source from our GeoJSON data and\n        // set the 'cluster' option to true. GL-JS will\n        // add the point_count property to your source data.\n        map.addSource('earthquakes', {\n            type: 'geojson',\n            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n            data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',\n            cluster: true,\n            clusterMaxZoom: 14, // Max zoom to cluster points on\n            clusterRadius: 100 // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({\n            id: 'clusters',\n            type: 'circle',\n            source: 'earthquakes',\n            filter: ['has', 'point_count'],\n            paint: {\n                // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)\n                // with three steps to implement three types of circles:\n                //   * Blue, 20px circles when point count is less than 100\n                //   * Yellow, 30px circles when point count is between 100 and 750\n                //   * Pink, 40px circles when point count is greater than or equal to 750\n                'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#51bbd6',\n                    100,\n                    '#f1f075',\n                    750,\n                    '#f28cb1'\n                ],\n                'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    20,\n                    100,\n                    30,\n                    750,\n                    40\n                ]\n            }\n        });\n\n        map.addLayer({\n            id: 'cluster-count',\n            type: 'symbol',\n            source: 'earthquakes',\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': ['get', 'point_count_abbreviated'],\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12\n            }\n        });\n\n        map.addLayer({\n            id: 'unclustered-point',\n            type: 'circle',\n            source: 'earthquakes',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': '#11b4da',\n                'circle-radius': 4,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#fff'\n            }\n        });\n\n        // inspect a cluster on click\n        map.on('click', 'clusters', (e) => {\n            const features = map.queryRenderedFeatures(e.point, {\n                layers: ['clusters']\n            });\n            const clusterId = features[0].properties.cluster_id;\n            map.getSource('earthquakes').getClusterExpansionZoom(\n                clusterId,\n                (err, zoom) => {\n                    if (err) return;\n\n                    map.easeTo({\n                        center: features[0].geometry.coordinates,\n                        zoom: zoom\n                    });\n                }\n            );\n        });\n\n        // When a click event occurs on a feature in\n        // the unclustered-point layer, open a popup at\n        // the location of the feature, with\n        // description HTML from its properties.\n        map.on('click', 'unclustered-point', (e) => {\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const mag = e.features[0].properties.mag;\n            const tsunami =\n                e.features[0].properties.tsunami === 1 ? 'yes' : 'no';\n\n            // Ensure that if the map is zoomed out such that\n            // multiple copies of the feature are visible, the\n            // popup appears over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            new mapboxgl.Popup()\n                .setLngLat(coordinates)\n                .setHTML(\n                    `magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`\n                )\n                .addTo(map);\n        });\n\n        map.on('mouseenter', 'clusters', () => {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'clusters', () => {\n            map.getCanvas().style.cursor = '';\n        });\n    });"],"mappings":"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"},"metadata":{},"sourceType":"module"}