{"ast":null,"code":"var _jsxFileName = \"/home/assassin/GIT/Admin_panel_API/src/view_panel/items_all.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Items = () => {\n  _s();\n\n  const [apiData, setApiData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/api/Items_li/\");\n        const data = await response.json(); // Assuming your API response structure is as shown in your example\n\n        setApiData(data.message); // Set the entire array\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to run effect only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: apiData !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: apiData.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"ID: \", item.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", item.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: \", item.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Filename: \", item.filename]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Uploaded At: \", item.uploaded_at]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${item.image}`,\n          alt: item.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Items, \"noAg7g3YD8y0s3I7k2yGkzb25Kw=\");\n\n_c = Items;\nexport default Items;\n\nvar _c;\n\n$RefreshReg$(_c, \"Items\");","map":{"version":3,"names":["React","useState","useEffect","Items","apiData","setApiData","fetchData","response","fetch","data","json","message","error","console","map","item","id","name","price","filename","uploaded_at","image"],"sources":["/home/assassin/GIT/Admin_panel_API/src/view_panel/items_all.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Items = () => {\n  const [apiData, setApiData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/api/Items_li/\");\n        const data = await response.json();\n        // Assuming your API response structure is as shown in your example\n        setApiData(data.message); // Set the entire array\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to run effect only once on mount\n\n  return (\n    <div>\n      {apiData !== null ? (\n        <div>\n          {apiData.map((item) => (\n            <div key={item.id}>\n              <p>ID: {item.id}</p>\n              <p>Name: {item.name}</p>\n              <p>Price: {item.price}</p>\n              <p>Filename: {item.filename}</p>\n              <p>Uploaded At: {item.uploaded_at}</p>\n              <img src={`data:image/jpeg;base64,${item.image}`} alt={item.filename} />\n              {/* Assuming the image is in JPEG format */}\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Items;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAClB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMI,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,CAA5B;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAGF;;QACAL,UAAU,CAACI,IAAI,CAACE,OAAN,CAAV,CAJE,CAIwB;MAC3B,CALD,CAKE,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;MACD;IACF,CATD;;IAWAN,SAAS;EACV,CAbQ,EAaN,EAbM,CAAT,CAHkB,CAgBV;;EAER,oBACE;IAAA,UACGF,OAAO,KAAK,IAAZ,gBACC;MAAA,UACGA,OAAO,CAACU,GAAR,CAAaC,IAAD,iBACX;QAAA,wBACE;UAAA,mBAAQA,IAAI,CAACC,EAAb;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,qBAAUD,IAAI,CAACE,IAAf;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAA,sBAAWF,IAAI,CAACG,KAAhB;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF,eAIE;UAAA,yBAAcH,IAAI,CAACI,QAAnB;QAAA;UAAA;UAAA;UAAA;QAAA,QAJF,eAKE;UAAA,4BAAiBJ,IAAI,CAACK,WAAtB;QAAA;UAAA;UAAA;UAAA;QAAA,QALF,eAME;UAAK,GAAG,EAAG,0BAAyBL,IAAI,CAACM,KAAM,EAA/C;UAAkD,GAAG,EAAEN,IAAI,CAACI;QAA5D;UAAA;UAAA;UAAA;QAAA,QANF;MAAA,GAAUJ,IAAI,CAACC,EAAf;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QADD,gBAeC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAhBJ;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAvCD;;GAAMb,K;;KAAAA,K;AAyCN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}