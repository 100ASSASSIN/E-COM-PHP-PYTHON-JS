{"ast":null,"code":"var _jsxFileName = \"/home/assassin/GIT/Admin_panel_API/src/view_panel/orders_count .js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst YourOrders = () => {\n  _s();\n\n  const [apiData, setApiData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/new');\n        const data = await response.json(); // Assuming your API response structure is as shown in your example\n\n        setApiData(data[1].message[0][0]);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to run effect only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: apiData !== null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"% \", apiData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n};\n\n_s(YourOrders, \"noAg7g3YD8y0s3I7k2yGkzb25Kw=\");\n\n_c = YourOrders;\nexport default YourOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourOrders\");","map":{"version":3,"names":["React","useState","useEffect","YourOrders","apiData","setApiData","fetchData","response","fetch","data","json","message","error","console"],"sources":["/home/assassin/GIT/Admin_panel_API/src/view_panel/orders_count .js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from 'react';\n\nconst YourOrders = () => {\n    const [apiData, setApiData] = useState(null);\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch('http://127.0.0.1:8000/api/new');\n          const data = await response.json();\n          // Assuming your API response structure is as shown in your example\n          setApiData(data[1].message[0][0]);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      };\n  \n      fetchData();\n    }, []); // Empty dependency array to run effect only once on mount\n  \n    return (\n      <div>\n        {apiData !== null ? (\n          <p>% {apiData}</p>\n        ) : (\n          <p>Loading...</p>\n        )}\n      </div>\n    );\n  };\n\nexport default YourOrders;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACrB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMI,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAA5B;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAGF;;QACAL,UAAU,CAACI,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAAV;MACD,CALD,CAKE,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;MACD;IACF,CATD;;IAWAN,SAAS;EACV,CAbQ,EAaN,EAbM,CAAT,CAHqB,CAgBb;;EAER,oBACE;IAAA,UACGF,OAAO,KAAK,IAAZ,gBACC;MAAA,iBAAMA,OAAN;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,gBAGC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAJJ;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CA3BH;;GAAMD,U;;KAAAA,U;AA6BN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}