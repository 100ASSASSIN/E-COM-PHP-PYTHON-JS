{"ast":null,"code":"var _jsxFileName = \"/home/assassin/GIT/Admin_panel_API/src/view_panel/orders_count .js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst YourOrders = () => {\n  _s();\n\n  const [apiData, setApiData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/List/\");\n        const data = await response.json(); // Assuming your API response structure is as shown in your example\n\n        setApiData(data[0].message[0][0]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to run effect only once on mount\n  // Function to transform apiData into Chart.js data format\n\n  const transformDataForChart = data => {\n    // You need to transform your data into Chart.js data format\n    // Here's just a simple example assuming apiData is a number representing a percentage\n    const chartData = {\n      labels: [\"Order Percentage\", \"Remaining Percentage\"],\n      datasets: [{\n        data: [data, 100 - data],\n        backgroundColor: [\"#FF6384\", \"#36A2EB\"],\n        hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\"]\n      }]\n    };\n    return chartData;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: apiData !== null ? /*#__PURE__*/_jsxDEV(Pie, {\n      data: transformDataForChart(apiData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(YourOrders, \"noAg7g3YD8y0s3I7k2yGkzb25Kw=\");\n\n_c = YourOrders;\nexport default YourOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourOrders\");","map":{"version":3,"names":["React","useState","useEffect","Pie","YourOrders","apiData","setApiData","fetchData","response","fetch","data","json","message","error","console","transformDataForChart","chartData","labels","datasets","backgroundColor","hoverBackgroundColor"],"sources":["/home/assassin/GIT/Admin_panel_API/src/view_panel/orders_count .js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\n\nconst YourOrders = () => {\n  const [apiData, setApiData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/List/\");\n        const data = await response.json();\n        // Assuming your API response structure is as shown in your example\n        setApiData(data[0].message[0][0]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to run effect only once on mount\n\n  // Function to transform apiData into Chart.js data format\n  const transformDataForChart = (data) => {\n    // You need to transform your data into Chart.js data format\n    // Here's just a simple example assuming apiData is a number representing a percentage\n    const chartData = {\n      labels: [\"Order Percentage\", \"Remaining Percentage\"],\n      datasets: [\n        {\n          data: [data, 100 - data],\n          backgroundColor: [\"#FF6384\", \"#36A2EB\"],\n          hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\"],\n        },\n      ],\n    };\n    return chartData;\n  };\n\n  return (\n    <div>\n      {apiData !== null ? (\n        <Pie data={transformDataForChart(apiData)} />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default YourOrders;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACvB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMK,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAD,CAA5B;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAGF;;QACAL,UAAU,CAACI,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAAV;MACD,CALD,CAKE,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;MACD;IACF,CATD;;IAWAN,SAAS;EACV,CAbQ,EAaN,EAbM,CAAT,CAHuB,CAgBf;EAER;;EACA,MAAMQ,qBAAqB,GAAIL,IAAD,IAAU;IACtC;IACA;IACA,MAAMM,SAAS,GAAG;MAChBC,MAAM,EAAE,CAAC,kBAAD,EAAqB,sBAArB,CADQ;MAEhBC,QAAQ,EAAE,CACR;QACER,IAAI,EAAE,CAACA,IAAD,EAAO,MAAMA,IAAb,CADR;QAEES,eAAe,EAAE,CAAC,SAAD,EAAY,SAAZ,CAFnB;QAGEC,oBAAoB,EAAE,CAAC,SAAD,EAAY,SAAZ;MAHxB,CADQ;IAFM,CAAlB;IAUA,OAAOJ,SAAP;EACD,CAdD;;EAgBA,oBACE;IAAA,UACGX,OAAO,KAAK,IAAZ,gBACC,QAAC,GAAD;MAAK,IAAI,EAAEU,qBAAqB,CAACV,OAAD;IAAhC;MAAA;MAAA;MAAA;IAAA,QADD,gBAGC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAJJ;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CA5CD;;GAAMD,U;;KAAAA,U;AA8CN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}